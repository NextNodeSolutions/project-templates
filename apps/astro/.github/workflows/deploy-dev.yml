name: Deploy to Development

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  FLY_APP_NAME: dev-{{project_name}}
  CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
  WEBSITE_URL: {{website_url}}

jobs:
  quality-checks:
    name: Quality Checks
    uses: ./.github/workflows/quality-checks.yml
    with:
      run-lint: true
      run-typecheck: true
      run-test: true
      run-build: true
      run-security: false
      test-coverage: false
      node-version: '22'
      pnpm-version: '10.11.0'

  deploy:
    name: Deploy to Fly.io Dev
    runs-on: ubuntu-latest
    needs: quality-checks
    environment: development
    outputs:
      fly_url: ${{ steps.deploy_info.outputs.fly_url }}
      deployed: ${{ steps.deploy_info.outputs.deployed }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Initialize & Deploy
        run: |
          # Ensure IPs are allocated
          if ! flyctl ips list --app ${{ env.FLY_APP_NAME }} 2>/dev/null | grep -q "v4"; then
            flyctl ips allocate-v4 --app ${{ env.FLY_APP_NAME }} --yes
          fi
          if ! flyctl ips list --app ${{ env.FLY_APP_NAME }} 2>/dev/null | grep -q "v6"; then
            flyctl ips allocate-v6 --app ${{ env.FLY_APP_NAME }}
          fi
          
          # Deploy
          cp fly.toml fly.dev.toml
          sed -i 's/app = "{{project_name}}"/app = "dev-{{project_name}}"/' fly.dev.toml
          flyctl deploy --config fly.dev.toml --wait-timeout=10m
          rm fly.dev.toml
          
          # Health check
          sleep 30
          if ! curl -f -s --max-time 30 "https://${{ env.FLY_APP_NAME }}.fly.dev" > /dev/null; then
            exit 1
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Set Deploy Info
        id: deploy_info
        run: |
          echo "fly_url=https://${{ env.FLY_APP_NAME }}.fly.dev" >> $GITHUB_OUTPUT
          echo "deployed=true" >> $GITHUB_OUTPUT

  dns:
    name: Configure DNS
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'
    outputs:
      dns_updated: ${{ steps.dns_check.outputs.updated }}
      custom_url: ${{ steps.dns_check.outputs.custom_url }}

    steps:
      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Update DNS & SSL
        id: dns_check
        run: |
          # Check if website_url is provided and not empty
          if [[ -z "${{ env.WEBSITE_URL }}" || "${{ env.WEBSITE_URL }}" == "" ]]; then
            echo "No custom domain configured, using Fly.io URL"
            echo "updated=false" >> $GITHUB_OUTPUT
            echo "custom_url=https://${{ env.FLY_APP_NAME }}.fly.dev" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Set domain for DNS operations
          DOMAIN_DEV="dev.${{ env.WEBSITE_URL }}"
          echo "Configuring custom domain: $DOMAIN_DEV"
          # Get Fly.io IPs
          IPV4=$(flyctl ips list --app ${{ env.FLY_APP_NAME }} --json | jq -r '.[] | select(.Type == "v4") | .Address' | head -1)
          IPV6=$(flyctl ips list --app ${{ env.FLY_APP_NAME }} --json | jq -r '.[] | select(.Type == "v6") | .Address' | head -1)
          [[ -z "$IPV6" || "$IPV6" == "null" ]] && IPV6=""
          
          # Determine target IP and record type
          if [[ -n "$IPV6" ]]; then
            TARGET_IP="$IPV6"
            RECORD_TYPE="AAAA"
          else
            TARGET_IP="$IPV4"
            RECORD_TYPE="A"
          fi
          
          # Check current DNS
          CURRENT_IP=$(curl -s "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/dns_records?name=$DOMAIN_DEV&type=$RECORD_TYPE" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" | jq -r '.result[0].content // ""')
          
          # Update DNS if needed
          if [[ "$TARGET_IP" != "$CURRENT_IP" || -z "$CURRENT_IP" ]]; then
            RECORD_DATA=$(curl -s "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/dns_records?name=$DOMAIN_DEV&type=$RECORD_TYPE" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}")
            RECORD_ID=$(echo "$RECORD_DATA" | jq -r '.result[0].id // ""')
            
            if [[ -n "$RECORD_ID" && "$RECORD_ID" != "null" ]]; then
              # Update existing record
              curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/dns_records/$RECORD_ID" \
                -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                --data "{\"type\":\"$RECORD_TYPE\",\"name\":\"dev\",\"content\":\"$TARGET_IP\",\"ttl\":1,\"proxied\":true}" > /dev/null
            else
              # Create new record
              curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/dns_records" \
                -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                --data "{\"type\":\"$RECORD_TYPE\",\"name\":\"dev\",\"content\":\"$TARGET_IP\",\"ttl\":1,\"proxied\":true}" > /dev/null
            fi
            
            # Clean up old record type
            if [[ "$RECORD_TYPE" == "AAAA" ]]; then
              OLD_RECORD_ID=$(curl -s "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/dns_records?name=$DOMAIN_DEV&type=A" \
                -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" | jq -r '.result[0].id // ""')
              [[ -n "$OLD_RECORD_ID" && "$OLD_RECORD_ID" != "null" ]] && \
                curl -s -X DELETE "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/dns_records/$OLD_RECORD_ID" \
                  -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" > /dev/null
            fi
            echo "updated=true" >> $GITHUB_OUTPUT
          else
            echo "updated=false" >> $GITHUB_OUTPUT
          fi
          
          # Setup SSL
          if ! flyctl certs list --app ${{ env.FLY_APP_NAME }} | grep -q "$DOMAIN_DEV"; then
            flyctl certs create $DOMAIN_DEV --app ${{ env.FLY_APP_NAME }}
          fi
          
          echo "custom_url=https://$DOMAIN_DEV" >> $GITHUB_OUTPUT
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}


  notify:
    name: Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, deploy, dns]
    if: always()

    steps:
      - name: Summary
        run: |
          echo "ðŸš€ Dev Deployment Summary"
          echo "Quality Checks: ${{ needs.quality-checks.result }}"
          echo "Deploy: ${{ needs.deploy.result }} | DNS: ${{ needs.dns.result }}"
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            if [[ -z "${{ env.WEBSITE_URL }}" || "${{ env.WEBSITE_URL }}" == "" ]]; then
              echo "âœ… https://${{ env.FLY_APP_NAME }}.fly.dev"
            else
              echo "âœ… https://dev.${{ env.WEBSITE_URL }}"
            fi
          else
            exit 1
          fi
